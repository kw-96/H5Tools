import{__awaiter as e}from"../../node_modules/tslib/tslib.es6.js";import{ImageUtils as t,Utils as i}from"../utils/index.js";class r{static loadAll(){return e(this,void 0,void 0,function*(){const t=this.fonts.map(t=>e(this,void 0,void 0,function*(){try{return yield figma.loadFontAsync(t),{success:!0,font:t}}catch(e){return{success:!1,font:t,error:e}}})),i=(yield Promise.all(t)).filter(e=>!e.success).map(e=>e.font);i.length>0&&console.warn("部分字体加载失败:",i)})}static loadSingle(t){return e(this,void 0,void 0,function*(){try{yield figma.loadFontAsync(t)}catch(e){console.warn(`字体加载失败: ${t.family} ${t.style}`,e)}})}static loadInterFonts(){return e(this,void 0,void 0,function*(){return this.loadAll()})}}r.fonts=[{family:"Inter",style:"Regular"},{family:"Inter",style:"Medium"},{family:"Inter",style:"Bold"}];class n{static hexToRgb(e){if(!e||"string"!=typeof e||""===e.trim())return console.warn("ColorUtils.hexToRgb: 无效的颜色值，使用默认白色",e),{r:1,g:1,b:1};const t=(4===e.length?"#"+e.slice(1).split("").map(e=>e+e).join(""):e).replace("#","");return/^[0-9A-Fa-f]{6}$/.test(t)?{r:parseInt(t.substring(0,2),16)/255,g:parseInt(t.substring(2,4),16)/255,b:parseInt(t.substring(4,6),16)/255}:(console.warn("ColorUtils.hexToRgb: 无效的十六进制颜色格式，使用默认白色",e),{r:1,g:1,b:1})}static createSolidFill(e,t=1){return{type:"SOLID",color:e,opacity:t}}}class a{static createFrame(e,t,i){const r=figma.createFrame();return r.name=e,r.resize(t,i),r}static createText(t,i){return e(this,arguments,void 0,function*(e,t,i="Regular"){const n=figma.createText(),a={family:"Inter",style:i};return yield r.loadSingle(a),n.characters=e,n.fontSize=t,n.fontName=a,n})}static setupAutoLayout(e,t="VERTICAL",i=0,r=0){e.layoutMode=t,e.primaryAxisSizingMode="AUTO",e.counterAxisSizingMode="FIXED",e.itemSpacing=i,e.paddingTop=r,e.paddingBottom=r,e.paddingLeft=r,e.paddingRight=r,e.primaryAxisAlignItems="MIN",e.counterAxisAlignItems="CENTER"}static safeAppendChild(e,t,i="节点添加"){try{return e?t?(e.appendChild(t),!0):(console.warn(`${i}: 子节点无效`),!1):(console.warn(`${i}: 父节点无效`),!1)}catch(e){return console.error(`${i}失败:`,e),!1}}static safeBatchAppendChildren(e,t,i="批量节点添加"){let r=0;return t.forEach((t,n)=>{t&&this.safeAppendChild(e,t,`${i}[${n}]`)&&r++}),r}static safeRemoveNode(e,t="节点移除"){try{return e?e.parent?(e.remove(),!0):(console.warn(`${t}: 节点没有父节点`),!1):(console.warn(`${t}: 节点无效`),!1)}catch(e){return console.error(`${t}失败:`,e),!1}}}class s{static createImage(t){return e(this,void 0,void 0,function*(){try{return figma.createImage(t)}catch(e){return console.error("图片创建失败:",e),null}})}static createLargeImage(t,i,r){return e(this,arguments,void 0,function*(e,t,i,r="大图片"){try{const n=figma.createRectangle();return n.name=r,n.resize(t,i),yield this.fillTheSelection(n,e),n}catch(e){return console.error("大图片创建失败:",e),null}})}static fillTheSelection(t,i){return e(this,void 0,void 0,function*(){try{const e=yield this.createImage(i);e?t.fills=[{type:"IMAGE",imageHash:e.hash,scaleMode:"FILL"}]:(t.fills=[n.createSolidFill({r:.9,g:.9,b:.9})],console.warn("图片过大，使用默认填充"))}catch(e){console.error("填充图片失败:",e),t.fills=[n.createSolidFill({r:.9,g:.9,b:.9})]}})}static createImageFill(t){return e(this,arguments,void 0,function*(e,t="FILL"){const i=yield this.createImage(e);return i?{type:"IMAGE",imageHash:i.hash,scaleMode:t}:n.createSolidFill({r:.9,g:.9,b:.9})})}static insertImage(i,r){return e(this,arguments,void 0,function*(e,i,r=800,n=600){try{let a,s,o;if(e&&"object"==typeof e&&"data"in e)a=e.data,s=e.width,o=e.height;else{if(!(e instanceof Uint8Array))return console.warn(`图片数据格式错误: ${i}`),null;a=e,s=r,o=n}if(!a||0===a.length)return console.warn(`图片数据为空: ${i}`),null;const l=4096;if(t.isOversized(s,o,l))return yield this.handleOversizedImage(a,s,o,i);const c=yield this.createImage(a);if(c){const e=figma.createRectangle();return e.name=i,e.resize(s,o),e.fills=[{type:"IMAGE",imageHash:c.hash,scaleMode:"FILL"}],e}return console.warn(`图片创建失败: ${i}，创建占位矩形`),this.createPlaceholderRect(s,o,i,"图片创建失败")}catch(e){return console.error(`图片插入失败: ${i}`,e),null}})}static handleOversizedImage(i,r,n,a){return e(this,void 0,void 0,function*(){return new Promise(s=>{const o=setTimeout(()=>{console.warn(`图片分割超时: ${a}`),s(this.createPlaceholderRect(r,n,a,"图片尺寸过大"))},15e3),l=t.calculateSliceStrategy(r,n,4096),c={direction:l.direction,sliceWidth:l.sliceWidth,sliceHeight:l.sliceHeight,slicesCount:l.slicesCount,description:l.description};figma.ui.postMessage({type:"slice-large-image",imageData:{bytes:Array.from(i),width:r,height:n,name:a,type:"image/png"},sliceWidth:c.sliceWidth,sliceHeight:c.sliceHeight,sliceStrategy:c});const h=t=>e(this,void 0,void 0,function*(){if("slice-image-response"===t.type&&t.imageName===a){if(clearTimeout(o),t.success&&t.slices&&t.slices.length>0)try{const e=yield this.assembleSlicedImage(t.slices,r,n,a,c);s(e)}catch(e){console.error(`图片组装失败: ${a}`,e),s(this.createPlaceholderRect(r,n,a,"图片组装失败"))}else console.warn(`图片切片失败: ${a}`,t.error||"未知错误"),s(this.createPlaceholderRect(r,n,a,"图片切片失败"));figma.ui.off("message",h)}});figma.ui.on("message",h),setTimeout(()=>{figma.ui.off("message",h)},16e3)})})}static assembleSlicedImage(t,i,r,n,s){return e(this,void 0,void 0,function*(){try{figma.notify(`正在组装图片: ${n} (${s.description})`,{timeout:2e3});const e=[];for(let i=0;i<t.length;i++){const r=t[i],a=new Uint8Array(r.bytes);try{const t=yield this.createImage(a);if(t){const a=figma.createRectangle();a.name=`${n}_slice_${i+1}`,a.resize(r.width,r.height),a.x=r.x,a.y=r.y,a.fills=[{type:"IMAGE",imageHash:t.hash,scaleMode:"FILL"}],e.push(a)}else console.warn(`切片 ${i+1} 图片创建失败，跳过此切片`)}catch(e){console.error(`切片 ${i+1} 处理失败:`,e)}}if(!(e.length>0))throw new Error("没有成功创建任何切片");try{const t=a.safeBatchAppendChildren(figma.currentPage,e,"图片切片批量添加到页面");t!==e.length&&console.warn(`部分切片添加失败，成功：${t}/${e.length}`);const i=figma.group(e,figma.currentPage);return i.name=n,i.x=0,i.y=0,figma.notify(`图片组装完成: ${n}`,{timeout:1e3}),i}catch(t){throw console.error("创建分组失败:",t),e.forEach((e,t)=>{a.safeRemoveNode(e,`清理图片切片${t+1}`)}),t}}catch(e){throw console.error("图片组装失败:",e),e}})}static createPlaceholderRect(e,t,i,s="未知原因"){const o=figma.createRectangle();o.name=`${i} (占位)`,o.resize(e,t);const l=s.includes("尺寸过大")?{r:1,g:.9,b:.8}:{r:.95,g:.95,b:.95};o.fills=[n.createSolidFill(l)];try{r.loadSingle({family:"Inter",style:"Regular"}).then(()=>{const r=figma.createText();r.fontName={family:"Inter",style:"Regular"},r.characters=`${i}\n${e}×${t}\n${s}`,r.fontSize=Math.min(Math.max(12,e/50),20),r.fills=[n.createSolidFill({r:.4,g:.4,b:.4})],r.textAlignHorizontal="CENTER",r.textAlignVertical="CENTER",o.parent&&(r.x=o.x+(e-r.width)/2,r.y=o.y+(t-r.height)/2,a.safeAppendChild(o.parent,r,"占位矩形文本添加"))}).catch(()=>{console.warn("占位文本创建失败")})}catch(e){console.warn("占位文本添加失败:",e)}return o}static setImageFill(t,r){return e(this,arguments,void 0,function*(e,t,r="FILL"){if(!t)return;const n=i.extractUint8Array(t);if(n)try{const t=yield this.createImageFill(n,r);e.fills=[t]}catch(e){console.error("设置图片填充失败:",e)}})}}function o(t,i,r,o){return e(this,arguments,void 0,function*(e,t,i,r,o=24,l="Bold"){const c=a.createFrame("标题容器",i,r);if(t?yield s.setImageFill(c,t):c.fills=[n.createSolidFill({r:.95,g:.95,b:.95})],e){const t=yield a.createText(e,o,l);t.fills=[n.createSolidFill({r:0,g:0,b:0})],t.textAlignHorizontal="CENTER",t.textAlignVertical="CENTER",t.x=(i-t.width)/2,t.y=(r-t.height)/2,c.appendChild(t)}return c})}export{n as ColorUtils,r as FontManager,s as ImageNodeBuilder,a as NodeUtils,o as createTitleContainer};
//# sourceMappingURL=figma-utils.js.map
