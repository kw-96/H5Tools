---
description: 
globs: 
alwaysApply: true
---
---
description: 构建和部署流程指南，包含构建命令、部署流程和检查清单
globs: 
  - "build.js"
  - "package.json" 
  - "tsconfig.json"
  - "manifest.json"
alwaysApply: false
---

# 构建和部署

## 构建命令
```bash
# 🚀 统一构建（推荐）- 一键完成所有构建
npm run build

# 分别构建（高级用法）
npm run build:core     # 仅构建核心库
npm run build:plugin   # 仅构建插件
npm run build:ui       # 仅构建UI（等同于npm run build）
npm run build:separate # 分别构建（旧方式，不含UI）

# 开发模式
npm run dev           # 插件开发模式
npm run dev:core      # 核心库开发模式

# 代码检查
npm run type-check    # TypeScript类型检查
npm run lint          # ESLint代码检查
npm run lint:fix      # 自动修复ESLint问题

# 环境管理
npm run clean         # 清理构建产物
npm run setup         # 项目初始化
```

## 统一构建流程（build.js）
1. **环境清理**: 清理`dist/`目录
2. **核心库构建**: `src/core/` → `dist/core/` (TypeScript编译)
3. **插件构建**: `src/plugin/` → `dist/plugin/` (TypeScript编译)
4. **UI构建**: CSS/JS内联 → `dist/ui.html` (Figma沙盒适配)

## 部署检查清单
- [ ] TypeScript编译无错误
- [ ] ESLint检查通过（允许console警告）
- [ ] 所有测试通过
- [ ] manifest.json路径正确
- [ ] 构建产物完整
- [ ] 🚨 **关键**：检查JavaScript变量无重复声明
- [ ] 🚨 **关键**：验证StorageAdapter正确内联
- [ ] 🚨 **关键**：确认所有资源已内联（无外部依赖）

## 🚨 Figma插件特殊检查

### 变量声明验证
```bash
# Windows环境检查重复声明
findstr /n "const storageAdapter" dist\\ui.html
findstr /n "class StorageAdapter" dist\\ui.html

# 应该只有以下结果：
# XXXX:class StorageAdapter {        (类定义)
# YYYY:const storageAdapter = new    (实例化)
```

### 内联资源验证
```bash
# 检查是否还有外部资源引用
findstr /n "src=" dist\\ui.html      # 应该无结果
findstr /n "href=" dist\\ui.html     # 应该无结果（除了#锚点）
```

### 构建产物验证
- 📁 `dist/ui.html` 存在且大小 > 170KB (内联版本)
- 📁 `dist/plugin/code-standalone.js` 存在且大小约13KB
- 📁 `dist/core/` 目录存在且包含完整模块化构建文件
- 📁 `dist/core/index.js` 和 `dist/core/index.d.ts` 存在

### 🎯 统一构建验证
```bash
# 一键构建验证
npm run build

# 预期输出：
# ✅ 清理dist目录完成
# ✅ 核心库构建完成  
# ✅ 插件构建完成
# ✅ CSS合并完成: ~30KB
# ✅ JavaScript合并完成: ~83KB
# ✅ 内联HTML构建完成: ~170KB
# 📦 Figma插件沙盒适配: CSS + JS 已完全内联
```

## 2024-12-19 构建流程优化记录

### 优化背景
原构建流程需要执行两个命令（`npm run build` + `node build.js`），用户体验不佳。

### 优化方案
将所有构建步骤整合到统一的`npm run build`命令中：

#### 1. 统一构建命令
```bash
# 新的统一构建（推荐）
npm run build           # 一键完成所有构建

# 保留的高级选项
npm run build:core      # 仅构建核心库
npm run build:plugin    # 仅构建插件
npm run build:ui        # 仅构建UI（等同于npm run build）
npm run build:separate  # 分别构建（旧方式，不含UI）
```

#### 2. 构建流程整合
`build.js`脚本包含完整构建流程：
1. **环境清理**: 清理dist目录
2. **核心库构建**: TypeScript编译核心库
3. **插件构建**: TypeScript编译插件主程序
4. **UI构建**: CSS/JS内联，生成Figma沙盒适配版HTML

#### 3. 优化效果
- **操作简化**: 从2个命令简化为1个命令
- **错误减少**: 避免忘记执行UI构建步骤
- **构建完整性**: 100%保证所有构建步骤执行
- **向后兼容**: 保留所有原有构建选项

### 技术实现
- 修改`package.json`中的scripts配置
- `build`命令直接调用`node build.js`
- 保留分别构建命令以支持高级用法
- 新增环境管理命令（clean、setup）

### 验证结果
- ✅ 一键构建成功
- ✅ 构建产物完整（core/ + plugin/ + ui.html）
- ✅ Figma沙盒适配正常
- ✅ 向后兼容性保持

**构建体验显著提升！** 🎉



