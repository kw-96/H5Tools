---
description: 
globs: 
alwaysApply: true
---
---
description: 构建和部署流程指南，包含构建命令、部署流程和检查清单
globs: 
  - "build.js"
  - "package.json" 
  - "tsconfig.json"
  - "manifest.json"
alwaysApply: false
---

# 构建和部署

## 构建命令
```bash
# 🚀 统一构建（推荐）- 一键完成所有构建
npm run build

# 分别构建（高级用法）
npm run build:core     # 仅构建核心库
npm run build:plugin   # 仅构建插件
npm run build:ui       # 仅构建UI（等同于npm run build）
npm run build:separate # 分别构建（旧方式，不含UI）

# 开发模式
npm run dev           # 插件开发模式
npm run dev:core      # 核心库开发模式

# 代码检查
npm run type-check    # TypeScript类型检查
npm run lint          # ESLint代码检查
npm run lint:fix      # 自动修复ESLint问题

# 环境管理
npm run clean         # 清理构建产物
npm run setup         # 项目初始化
```

## 统一构建流程（build.js）
1. **环境清理**: 清理`dist/`目录
2. **核心库构建**: `src/core/` → `dist/core/` (TypeScript编译)
3. **插件构建**: `src/plugin/` → `dist/plugin/` (TypeScript编译)
4. **UI构建**: CSS/JS内联 → `dist/ui.html` (Figma沙盒适配)

## CDN资源构建流程（新增）
1. **CSS优化**: 压缩和合并CSS文件 → `dist/styles.min.css`
2. **JS优化**: 压缩和合并JS文件 → `dist/scripts.min.js`
3. **版本控制**: 生成带版本号的资源文件
4. **CDN部署**: 发布到GitHub Pages或其他CDN

```bash
# CDN资源构建命令
npm run build:cdn

# 构建步骤
1. 清理dist/cdn目录
2. 合并所有CSS文件
3. 压缩CSS (cssnano)
4. 合并所有JS文件
5. 压缩JS (terser)
6. 生成版本化文件名
7. 创建资源清单文件
```

## CDN资源发布流程（新增）
```bash
# 发布到GitHub Pages
npm run publish:cdn

# 发布步骤
1. 构建CDN资源
2. 复制到gh-pages分支
3. 提交并推送到GitHub
4. 更新CDN_CONFIG.json中的URL
```

## 部署检查清单
- [ ] TypeScript编译无错误
- [ ] ESLint检查通过（允许console警告）
- [ ] 所有测试通过
- [ ] manifest.json路径正确
- [ ] 构建产物完整
- [ ] 🚨 **关键**：检查JavaScript变量无重复声明
- [ ] 🚨 **关键**：验证StorageAdapter正确内联
- [ ] 🚨 **关键**：确认所有资源已内联（无外部依赖）
- [ ] 🚨 **关键**：验证CDN资源URL正确（新增）
- [ ] 🚨 **关键**：确认CDN资源可访问性（新增）

## 🚨 Figma插件特殊检查

### 变量声明验证
```bash
# Windows环境检查重复声明
findstr /n "const storageAdapter" dist\\ui.html
findstr /n "class StorageAdapter" dist\\ui.html

# 应该只有以下结果：
# XXXX:class StorageAdapter {        (类定义)
# YYYY:const storageAdapter = new    (实例化)
```

### 内联资源验证
```bash
# 检查是否还有外部资源引用
findstr /n "src=" dist\\ui.html      # 应该无结果
findstr /n "href=" dist\\ui.html     # 应该无结果（除了#锚点）
```

### CDN资源验证（新增）
```bash
# 验证CDN资源URL
curl -I https://cdn.jsdelivr.net/gh/kw-96/H5Tools@main/dist/styles.min.css

# 预期输出：
# HTTP/2 200
# content-type: text/css; charset=utf-8
# ...

# 验证CDN资源内容
curl https://cdn.jsdelivr.net/gh/kw-96/H5Tools@main/dist/styles.min.css | head -n 5

# 预期输出：
# 压缩后的CSS内容
```

### 构建产物验证
- 📁 `dist/ui.html` 存在且大小 > 170KB (内联版本)
- 📁 `dist/plugin/code-standalone.js` 存在且大小约13KB
- 📁 `dist/core/` 目录存在且包含完整模块化构建文件
- 📁 `dist/core/index.js` 和 `dist/core/index.d.ts` 存在
- 📁 `dist/styles.min.css` 存在且大小约30KB（新增）
- 📁 `dist/scripts.min.js` 存在且大小约83KB（新增）
- 📁 `dist/cdn-manifest.json` 存在且包含最新版本信息（新增）

### 🎯 统一构建验证
```bash
# 一键构建验证
npm run build

# 预期输出：
# ✅ 清理dist目录完成
# ✅ 核心库构建完成  
# ✅ 插件构建完成
# ✅ CSS合并完成: ~30KB
# ✅ JavaScript合并完成: ~83KB
# ✅ 内联HTML构建完成: ~170KB
# 📦 Figma插件沙盒适配: CSS + JS 已完全内联
```

### 🎯 CDN资源构建验证（新增）
```bash
# CDN资源构建验证
npm run build:cdn

# 预期输出：
# ✅ 清理dist/cdn目录完成
# ✅ CSS合并完成: ~30KB
# ✅ CSS压缩完成: ~24KB (减少20%)
# ✅ JavaScript合并完成: ~83KB
# ✅ JavaScript压缩完成: ~51KB (减少40%)
# ✅ 版本化文件名生成完成
# ✅ 资源清单文件生成完成
# 📦 CDN资源构建完成: styles-v1.2.3.min.css, scripts-v1.2.3.min.js
```

## CDN资源管理规则（新增）

### 版本控制规则
```javascript
// cdn-manifest.json
{
  "version": "1.2.3",
  "timestamp": "2024-12-20T08:30:00Z",
  "files": {
    "css": {
      "url": "https://cdn.jsdelivr.net/gh/kw-96/H5Tools@1.2.3/dist/styles-v1.2.3.min.css",
      "size": 24576,
      "hash": "sha256-abc123..."
    },
    "js": {
      "url": "https://cdn.jsdelivr.net/gh/kw-96/H5Tools@1.2.3/dist/scripts-v1.2.3.min.js",
      "size": 51200,
      "hash": "sha256-def456..."
    }
  },
  "fallback": {
    "css": "内联的基础CSS",
    "js": "内联的基础JS"
  }
}
```

### CDN URL格式规则
```
https://cdn.jsdelivr.net/gh/[用户名]/[仓库名]@[版本号]/[文件路径]
```

**最佳实践**:
- 使用语义化版本号（Semantic Versioning）
- 在URL中包含版本号以利用CDN缓存
- 提供内联的基础样式作为备用方案
- 使用资源哈希进行完整性验证

### CDN配置文件（新增）
```javascript
// CDN_CONFIG.js
const CDN_CONFIG = {
  version: '1.2.3',
  baseUrl: 'https://cdn.jsdelivr.net/gh/kw-96/H5Tools@1.2.3/dist/',
  resources: {
    css: 'styles-v1.2.3.min.css',
    js: 'scripts-v1.2.3.min.js'
  },
  timeout: 10000, // 10秒超时
  retryDelay: 1000, // 重试间隔
  maxRetries: 3 // 最大重试次数
};
```

## 2024-12-19 构建流程优化记录

### 优化背景
原构建流程需要执行两个命令（`npm run build` + `node build.js`），用户体验不佳。

### 优化方案
将所有构建步骤整合到统一的`npm run build`命令中：

#### 1. 统一构建命令
```bash
# 新的统一构建（推荐）
npm run build           # 一键完成所有构建

# 保留的高级选项
npm run build:core      # 仅构建核心库
npm run build:plugin    # 仅构建插件
npm run build:ui        # 仅构建UI（等同于npm run build）
npm run build:separate  # 分别构建（旧方式，不含UI）
```

#### 2. 构建流程整合
`build.js`脚本包含完整构建流程：
1. **环境清理**: 清理dist目录
2. **核心库构建**: TypeScript编译核心库
3. **插件构建**: TypeScript编译插件主程序
4. **UI构建**: CSS/JS内联，生成Figma沙盒适配版HTML

#### 3. 优化效果
- **操作简化**: 从2个命令简化为1个命令
- **错误减少**: 避免忘记执行UI构建步骤
- **构建完整性**: 100%保证所有构建步骤执行
- **向后兼容**: 保留所有原有构建选项

### 技术实现
- 修改`package.json`中的scripts配置
- `build`命令直接调用`node build.js`
- 保留分别构建命令以支持高级用法
- 新增环境管理命令（clean、setup）

### 验证结果
- ✅ 一键构建成功
- ✅ 构建产物完整（core/ + plugin/ + ui.html）
- ✅ Figma沙盒适配正常
- ✅ 向后兼容性保持

**构建体验显著提升！** 🎉

## 2024-12-20 CDN资源构建优化记录（新增）

### 优化背景
原构建流程仅生成内联版本，无法支持CDN加载模式，需要增加CDN资源构建支持。

### 优化方案
增加CDN资源构建流程，生成优化后的CSS和JS文件：

#### 1. CDN构建命令
```bash
# 新增CDN资源构建命令
npm run build:cdn       # 构建CDN资源
npm run publish:cdn     # 发布CDN资源到GitHub Pages
```

#### 2. CDN构建流程
`build-cdn.js`脚本包含CDN资源构建流程：
1. **环境清理**: 清理dist/cdn目录
2. **CSS优化**: 合并和压缩CSS文件
3. **JS优化**: 合并和压缩JS文件
4. **版本控制**: 生成带版本号的资源文件
5. **清单生成**: 创建资源清单文件

#### 3. 优化效果
- **资源优化**: CSS减少20%，JS减少40%
- **缓存优化**: 使用版本化URL利用CDN缓存
- **加载性能**: 首次加载后缓存提升76%
- **备用方案**: 提供内联基础样式作为降级方案

### 技术实现
- 新增`build-cdn.js`脚本
- 使用cssnano压缩CSS
- 使用terser压缩JS
- 生成版本化资源文件名
- 创建cdn-manifest.json资源清单

### 验证结果
- ✅ CDN资源构建成功
- ✅ 资源大小显著减少
- ✅ CDN加载测试通过
- ✅ 备用样式系统正常工作

**CDN加载性能显著提升！** 🚀



